CMAKE_MINIMUM_REQUIRED(VERSION 3.2)

PROJECT(BufferProtocolTest CXX)

FIND_PACKAGE(pybind11 CONFIG REQUIRED)

SET(BINDING_PREFIX binding CACHE STRING "Binding subfolder name")

# list of headers
SET(HDR buffer_protocol.hpp)
# list of source files
SET(SRC )

FIND_PROGRAM( BINDER binder HINTS ${CMAKE_CURRENT_SOURCE_DIR}/../../_build/source )

SET(BINDING_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${BINDING_PREFIX})

SET( BINDING_CONFIG       ${CMAKE_CURRENT_SOURCE_DIR}/binding.cfg  CACHE FILEPATH "Binding config file")
SET( BINDING_INCLUDE_FILE ${CMAKE_CURRENT_SOURCE_DIR}/includes.hpp CACHE FILEPATH "Binding include file")

# Reconfigure if any of the listed files is modified
SET_PROPERTY( DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS 
	${BINDER}
	${BINDING_CONFIG} 
	${BINDING_INCLUDE_FILE} 
	${HDR}
	${BINDING_PATH}
)

# Run binder and generate binding files
EXECUTE_PROCESS(
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND ${CMAKE_COMMAND} -E make_directory ${BINDING_PREFIX}
	COMMAND ${BINDER} -root-module ${CMAKE_PROJECT_NAME} --prefix ${BINDING_PREFIX}
		--config ${BINDING_CONFIG} ${BINDING_INCLUDE_FILE} -- -std=c++17 -fPIC -fpermissive  -I${CMAKE_CURRENT_SOURCE_DIR}
	COMMAND_ECHO STDOUT
	OUTPUT_FILE ${CMAKE_PROJECT_NAME}.binder.out
	ERROR_FILE ${CMAKE_PROJECT_NAME}.binder.log
	RESULT_VARIABLE res
)

IF(NOT res EQUAL "0")
	MESSAGE( FATAL_ERROR "Binder command line failed, logs in ${CMAKE_PROJECT_NAME}.binder.log")
ENDIF()


IF(EXISTS "${BINDING_PATH}/${CMAKE_PROJECT_NAME}.sources")
	file(STRINGS ${BINDING_PATH}/${CMAKE_PROJECT_NAME}.sources BIND_SRC)
	list(TRANSFORM BIND_SRC PREPEND "${BINDING_PREFIX}/")
	MESSAGE(STATUS "BIND_SRC = ${BIND_SRC}")
ENDIF()

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_SOURCE_DIR}
	${pybind11_INCLUDE_DIRS}
)

ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED ${SRC} ${BIND_SRC} ${BINDING_INCLUDE_FILE} )

# Don't add lib prefix
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES PREFIX "")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)

# Compilation flags
TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -w -std=c++17 -fPIC -fpermissive)

